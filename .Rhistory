setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
style = "background-color: blue;",
style = "color:blue;",
align = "center")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
Sys.setenv(LANGUAGE='en')
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(mapview)
library(magick)
library(stringr)
library(shiny)
library(shinyWidgets)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyWidgets)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 4,
offset = 4,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 4,
offset = 4,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# display chosen location:
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center")
),
# display weather image:
fluidRow(
column(width = 12,
imageOutput("weather_image"))
),
# display current general weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# display chosen location:
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center")
),
# display weather image:
fluidRow(
column(width = 12,
imageOutput("weather_image"))
),
# display current general weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
})
}
# Run the application
shinyApp(ui = ui, server = server)
weatherImage <- weatherApp::get_weather_image("Amsterdam, Niederlande", Sys.getenv("MY_API"))
weatherIamge
weatherImage
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# display chosen location:
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center")
),
# display weather image:
fluidRow(
column(width = 12,
imageOutput("weather_image"))
),
# display current general weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
list( src = "www/weather_image",
alt = paste("weather image"),
width = 400,
height = 300)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
