server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# display chosen location:
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center")
),
# display weather image:
fluidRow(
column(width = 12,
imageOutput("weather_image"))
),
# display current general weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
})
}
# Run the application
shinyApp(ui = ui, server = server)
weatherImage <- weatherApp::get_weather_image("Amsterdam, Niederlande", Sys.getenv("MY_API"))
weatherIamge
weatherImage
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# display chosen location:
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center")
),
# display weather image:
fluidRow(
column(width = 12,
imageOutput("weather_image"))
),
# display current general weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
list( src = "www/weather_image",
alt = paste("weather image"),
width = 400,
height = 300)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(mapview)
library(magick)
library(stringr)
library(shiny)
library(shinyWidgets)
library(png)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp()
runApp()
runApp()
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp()
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp()
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
setwd("~/GitHub/weather_app/www")
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
list( src = "www/weather_image.png",
alt = paste("weather image"),
width = 300,
height = 220)
})
runApp('~/GitHub/weather_app')
get_weather_image <- function(location, api_key) {
# Again, we retrieve the  long/lat of the location and the current weather.
latitude <- geocode(location)$latitude
longitude <- geocode(location)$longitude
# latitude <- tidygeocoder::geo_osm(location)$lat[1] # old version
# longitude <- tidygeocoder::geo_osm(location)$long[1] # old version
if (is.na(latitude) | is.na(longitude)) {
stop("Please type in a valid location")
}
my_weather <- get_weather(location, api_key)
# Now, depending on the current weather at the location, we save a specific image in the object weather_image.
# E.g. If the weather is sunny, store an image of a clear sky in weather_image.
if (my_weather$current$weather$icon == "01d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326387-09d50900-99dd-11ea-8ca1-fdbc291ab991.jpg")
magick::image_info(weather_image)
weather_image <- magick::image_crop(weather_image, "1920x1280")
# If the weather is cloudly in any way, store an image of a cloudy sky in weather_image.
} else if (my_weather$current$weather$icon == "02d" | my_weather$current$weather$icon == "03d" | my_weather$current$weather$icon == "04d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326873-cdee7380-99dd-11ea-9899-cd9379a824f9.jpg")
weather_image <- magick::image_crop(weather_image, "1920x1280")
# If the weather is rainy, store an image of rain in weather_image.
} else if (my_weather$current$weather$icon == "09d" | my_weather$current$weather$icon == "10d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326953-e9f21500-99dd-11ea-80f3-5ddc2199632b.jpg")
# If the weather is a thunderstorm, store an image of a thundestorm in weather_image.
} else if (my_weather$current$weather$icon == "11d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326999-ffffd580-99dd-11ea-8317-cb0a01de15c7.jpg")
# If the weather is snowy, store an image of a snowy landschape in weather_image.
} else if (my_weather$current$weather$icon == "13d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327016-0b530100-99de-11ea-8131-b5e82581945d.jpg")
# If the weather is misty, store an image of a misty landschape in weather_image.
} else if (my_weather$current$weather$icon == "50d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
}
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
return(weather_image)
}
get_weather_image("Amsterdam", Sys.getenv("MY_API"))
library(weatherApp)
runApp('~/GitHub/weather_app')
get_weather_image <- function(location, api_key) {
# Again, we retrieve the  long/lat of the location and the current weather.
latitude <- geocode(location)$latitude
longitude <- geocode(location)$longitude
# latitude <- tidygeocoder::geo_osm(location)$lat[1] # old version
# longitude <- tidygeocoder::geo_osm(location)$long[1] # old version
if (is.na(latitude) | is.na(longitude)) {
stop("Please type in a valid location")
}
my_weather <- get_weather(location, api_key)
# Now, depending on the current weather at the location, we save a specific image in the object weather_image.
# E.g. If the weather is sunny, store an image of a clear sky in weather_image.
if (my_weather$current$weather$icon == "01d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326387-09d50900-99dd-11ea-8ca1-fdbc291ab991.jpg")
magick::image_info(weather_image)
weather_image <- magick::image_crop(weather_image, "1920x1280")
# If the weather is cloudly in any way, store an image of a cloudy sky in weather_image.
} else if (my_weather$current$weather$icon == "02d" | my_weather$current$weather$icon == "03d" | my_weather$current$weather$icon == "04d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326873-cdee7380-99dd-11ea-9899-cd9379a824f9.jpg")
weather_image <- magick::image_crop(weather_image, "1920x1280")
# If the weather is rainy, store an image of rain in weather_image.
} else if (my_weather$current$weather$icon == "09d" | my_weather$current$weather$icon == "10d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326953-e9f21500-99dd-11ea-80f3-5ddc2199632b.jpg")
# If the weather is a thunderstorm, store an image of a thundestorm in weather_image.
} else if (my_weather$current$weather$icon == "11d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326999-ffffd580-99dd-11ea-8317-cb0a01de15c7.jpg")
# If the weather is snowy, store an image of a snowy landschape in weather_image.
} else if (my_weather$current$weather$icon == "13d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327016-0b530100-99de-11ea-8131-b5e82581945d.jpg")
# If the weather is misty, store an image of a misty landschape in weather_image.
} else if (my_weather$current$weather$icon == "50d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
}
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
return(weather_image)
}
View(get_weather_image)
get_weather_image("Amsterdam", Sys.getenv("MY_API"))
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
weatherApp::get_weather_image("Amsterdam", Sys.getenv("MY_API"))
get_weather_image <- function(location, api_key) {
# Again, we retrieve the  long/lat of the location and the current weather.
latitude <- geocode(location)$latitude
longitude <- geocode(location)$longitude
# latitude <- tidygeocoder::geo_osm(location)$lat[1] # old version
# longitude <- tidygeocoder::geo_osm(location)$long[1] # old version
if (is.na(latitude) | is.na(longitude)) {
stop("Please type in a valid location")
}
my_weather <- get_weather(location, api_key)
# Now, depending on the current weather at the location, we save a specific image in the object weather_image.
# E.g. If the weather is sunny, store an image of a clear sky in weather_image.
if (my_weather$current$weather$icon == "01d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326387-09d50900-99dd-11ea-8ca1-fdbc291ab991.jpg")
magick::image_info(weather_image)
weather_image <- magick::image_crop(weather_image, "1920x1280")
# If the weather is cloudly in any way, store an image of a cloudy sky in weather_image.
} else if (my_weather$current$weather$icon == "02d" | my_weather$current$weather$icon == "03d" | my_weather$current$weather$icon == "04d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326873-cdee7380-99dd-11ea-9899-cd9379a824f9.jpg")
weather_image <- magick::image_crop(weather_image, "1920x1280")
# If the weather is rainy, store an image of rain in weather_image.
} else if (my_weather$current$weather$icon == "09d" | my_weather$current$weather$icon == "10d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326953-e9f21500-99dd-11ea-80f3-5ddc2199632b.jpg")
# If the weather is a thunderstorm, store an image of a thundestorm in weather_image.
} else if (my_weather$current$weather$icon == "11d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82326999-ffffd580-99dd-11ea-8317-cb0a01de15c7.jpg")
# If the weather is snowy, store an image of a snowy landschape in weather_image.
} else if (my_weather$current$weather$icon == "13d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327016-0b530100-99de-11ea-8131-b5e82581945d.jpg")
# If the weather is misty, store an image of a misty landschape in weather_image.
} else if (my_weather$current$weather$icon == "50d") {
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
}
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
return(weather_image)
}
setwd("~/GitHub/weather_app")
get_weather_image("Amsterdam, Niederlande", Sys.getenv("MY_API"))
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/GitHub/weather_app")
weatherApp::get_weather_image("Amsterdam", Sys.getenv("MY_API"))
devtools::document()
latitude <- geo_osm("Marl, Deutschland")$lat[1]
longitude <- geo_osm("Marl, Deutschland")$long[1]
apiKey <- "4442c8a4077bb52da19a77c4fa41f5f5"
myurl <- paste0("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", apiKey)
myRawResults <- httr::GET(myurl)
mycontent <- httr::content(myRawResults, as = "text")
myContentFromJson <- jsonlite::fromJSON(mycontent)
myContentFromJson
latitude <- tidygeocoder::geo_osm(location)$lat[1]
longitude <- tidygeocoder::geo_osm(location)$long[1]
apiKey <- "4442c8a4077bb52da19a77c4fa41f5f5"
myurl <- paste0("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", apiKey)
myRawResults <- httr::GET(myurl)
mycontent <- httr::content(myRawResults, as = "text")
myContentFromJson <- jsonlite::fromJSON(mycontent)
myContentFromJson
latitude <- tidygeocoder::geo_osm("Marl, Deutschland")$lat[1]
longitude <- tidygeocoder::geo_osm("Marl, Deutschland")$long[1]
apiKey <- "4442c8a4077bb52da19a77c4fa41f5f5"
myurl <- paste0("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", apiKey)
myRawResults <- httr::GET(myurl)
mycontent <- httr::content(myRawResults, as = "text")
myContentFromJson <- jsonlite::fromJSON(mycontent)
myContentFromJson
runApp()
shiny::runApp()
library(shiny)
library(shinyWidgets)
library(png)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(mapview)
library(magick)
library(tidygeocoder)
runApp()
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
weatherapp::get_weather_image("Marl", Sys.setenv("MY_API"))
weatherApp::get_weather_image("Marl", Sys.setenv("MY_API"))
library(stringr)
library(stringr)
weatherApp::get_weather_image("Marl", Sys.setenv("MY_API"))
weatherApp::get_weather_image("Marl", Sys.getenv("MY_API"))
runApp()
runApp()
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
weather_image <- NA
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
return(weather_image)
latitude <- tidygeocoder::geo_osm("Marl, Deutschland")$lat[1]
longitude <- tidygeocoder::geo_osm("Marl, Deutschland")$long[1]
apiKey <- "4442c8a4077bb52da19a77c4fa41f5f5"
myurl <- paste0("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", apiKey)
myRawResults <- httr::GET(myurl)
mycontent <- httr::content(myRawResults, as = "text")
myContentFromJson <- jsonlite::fromJSON(mycontent)
myContentFromJson
myContentFromJson$current$weather$icon
myContentFromJson$current$weather$icon == "01d"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(anytime)
install-packages("anytime")
install.packages("anytime")
runApp()
runApp()
Sys.timezone()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
Sys.geten("MY_API")
Sys.getenv("MY_API")
?setRepositories
runApp()
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
runApp()
runApp()
runApp()
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
shiny::runApp()
runApp()
setRepositories(addURLs = c(weatherApp = "https://github.com/Programming-The-Next-Step/weather_app.git"),
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
setRepositories(addURLs = c(weatherApp = "https://github.com/Programming-The-Next-Step/weather_app.git")
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
setRepositories(addURLs ="https://github.com/Programming-The-Next-Step/weather_app.git"
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
setRepositories(addURLs ="https://github.com/Programming-The-Next-Step/weather_app.git"
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
runApp()
runApp()
shiny::runApp()
runApp()
dir.exists("/www")
dir.exists("./www")
dir.creat("./www")
dir.create("./www")
devtools::document()
setwd("~/GitHub/weather_app/weatherApp")
setwd("~/GitHub/weather_app/weatherApp")
devtools::document()
devtools::build()
devtools::install()
setwd("~/GitHub/weather_app")
runApp()
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp", ref = "Functions-for-RPackage")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp", ref = "Functions-for-RPackage")
runApp()
runApp()
runApp()
setwd("~/GitHub/weather_app/weatherApp")
devtools::document()
devtools::build()
devtools::install()
setwd("~/GitHub/weather_app")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp", ref = "Functions-for-RPackage")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp", ref = "Functions-for-RPackage")
runApp()
setwd("~/GitHub/weather_app/weatherApp")
devtools::document()
