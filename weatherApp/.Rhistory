myContentFromJson <- jsonlite::fromJSON(mycontent)
myContentFromJson
runApp()
shiny::runApp()
library(shiny)
library(shinyWidgets)
library(png)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(mapview)
library(magick)
library(tidygeocoder)
runApp()
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
weatherapp::get_weather_image("Marl", Sys.setenv("MY_API"))
weatherApp::get_weather_image("Marl", Sys.setenv("MY_API"))
library(stringr)
library(stringr)
weatherApp::get_weather_image("Marl", Sys.setenv("MY_API"))
weatherApp::get_weather_image("Marl", Sys.getenv("MY_API"))
runApp()
runApp()
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
weather_image <- NA
weather_image <- magick::image_read("https://user-images.githubusercontent.com/64595164/82327064-232a8500-99de-11ea-814c-e0fe6292dc5f.jpg")
magick::image_write(weather_image, path = "www/weather_image.png", format = "png")
return(weather_image)
latitude <- tidygeocoder::geo_osm("Marl, Deutschland")$lat[1]
longitude <- tidygeocoder::geo_osm("Marl, Deutschland")$long[1]
apiKey <- "4442c8a4077bb52da19a77c4fa41f5f5"
myurl <- paste0("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", apiKey)
myRawResults <- httr::GET(myurl)
mycontent <- httr::content(myRawResults, as = "text")
myContentFromJson <- jsonlite::fromJSON(mycontent)
myContentFromJson
myContentFromJson$current$weather$icon
myContentFromJson$current$weather$icon == "01d"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/UvA/1. Programming - Next Step/app.R/Ui2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(anytime)
install-packages("anytime")
install.packages("anytime")
runApp()
runApp()
Sys.timezone()
runApp()
runApp()
runApp()
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(mapview)
library(magick)
library(stringr)
library(weatherApp)
setwd("~/UvA/1. Programming - Next Step/app.R/App-1")
apiKey <- "4442c8a4077bb52da19a77c4fa41f5f5"
get_weather_image("Amsterdam, Niederlande", apiKey)
get_weather_image("Sudan", apiKey)
shiny::runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
my_api_key <- apiKey
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
library(shiny)
library(shinyWidgets)
library(png)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(mapview)
library(magick)
library(stringr)
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
get_weather("Amsterdam", apiKey)
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
Sys.timezone()
runApp('~/GitHub/weather_app')
my_time <- get_weather("Amsterdam", apiKey)
my_time$current$sunrise
as.POSIXct(my_time$current$sunrise, origin="1970-01-01", TZ= "Europe/Berlin"))
as.POSIXct(my_time$current$sunrise, origin="1970-01-01", TZ= "Europe/Berlin")
as.POSIXlt(my_time$current$sunrise, origin="1970-01-01", TZ= "Europe/Berlin")
as.POSIXlt(my_time$current$sunrise, origin="1970-01-01", TZ= "")
as.POSIXlt(my_time$current$sunrise, origin="1960-01-01", TZ= "")
as.POSIXlt(my_time$current$sunrise, origin="1960-01-01", TZ= "GMT")
as.POSIXlt(my_time$current$sunrise, origin="1960-01-01", TZ= "EST")
as.POSIXlt(my_time$current$sunrise, origin="1970-01-01", TZ= "EST")
as.POSIXct(my_time$current$sunrise, origin="1970-01-01", TZ= "EST")
as.POSIXct(my_time$current$sunrise, origin="1970-01-01")
my_time$current$sunrise
my_time1 <- as.POSIXct(my_time$current$sunrise, origin="1970-01-01")
format(my_time1, tz ="Europe/Berlin", )
as.POSIXct(my_time$current$sunrise, origin="1970-01-01", TZ= "GMT")
as.POSIXct(my_time$current$sunrise, origin="1970-01-01", TZ= "UTC")
sunset <- weatherApp::get_weather(my_location(), my_api_key)
runApp('~/GitHub/weather_app')
test <- weatherApp::get_weather("Amsterdam, Niederlande", apiKey)
test$current$sunrise
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
gif <- get_weather_gif("Amsterdam, Niederlande", apiKey)
gif
get_map("Amsterdam, Niederlande")
gif <- get_weather_gif("Amsterdam, Niederlande", apiKey)
gif
runApp('~/GitHub/weather_app')
runApp()
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
devtools::document()
setwd("~/GitHub/weather_app")
setwd("~/GitHub/weather_app")
devtools::document()
setwd("~/GitHub/weather_app/weatherApp")
devtools::document()
devtools::build(9)
devtools::build()
devtools::install()
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
devtools::document()
devtools::build()
devtools::install()
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
get_weather_gif("Amsterdam, Netherlands", apiKey)
get_weather_gif("Amsterdam, Netherlands", apiKey)
setwd("~/UvA/1. Programming - Next Step/app.R/App-1")
get_weather_gif("Amsterdam, Netherlands", apiKey)
my_gif <- get_weather_gif("Amsterdam, Netherlands", apiKey)
my_gif
setwd("~/GitHub/weather_app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinycssloaders")
runApp()
runApp()
option(scipen = 999)
option(scipen = 999)
scipen(option = 999)
runApp()
weatherApp::geocoder("testtestwhat happens")
weatherApp::geocode("testtestwhat happens")
geocode <- function(location){
# split the location string, that the function got as input, into the different words.
my_location <- stringr::str_split(location, boundary("word"))
my_location_string <- my_location[[1]][1]
for(i in 2:length(my_location[[1]])){
my_location_string <- paste0(my_location_string, "+", my_location[[1]][i])
}
# Write down the url that retrieves the long/lat information from openstreetmap.org
my_url <- paste0("https://nominatim.openstreetmap.org/search?q=", my_location_string,
"&format=json&limit=1")
# call the Url, retrieve the data and check if it was successful.
my_raw_results <- httr::GET(my_url)
if (status_code(my_raw_results)[[1]] != 200) {
stop("Please enter a valid location!")
}
# Transform the JSON data into useable format.
my_content <- httr::content(my_raw_results, as = "text")
my_content_from_json <- jsonlite::fromJSON(my_content)
# Save the longitude latitude data in an object and return it.
geocode_data <- data.frame(3)
geocode_data$location <- location
geocode_data$latitude <- my_content_from_json$lat
geocode_data$longitude <- my_content_from_json$lon
if(geocode_data$latitude == NULL | geocode_data$latitude == NULL)  {
stop("Something went wrong. Please specify your location correctly.")
}
return(geocode_data)
}
geocode("testtestwhat happens")
my_location_string = "Blablabla"
my_url <- paste0("https://nominatim.openstreetmap.org/search?q=", my_location_string,
"&format=json&limit=1")
# call the Url, retrieve the data and check if it was successful.
my_raw_results <- httr::GET(my_url)
status_code(my_raw_results)[[1]]
# Transform the JSON data into useable format.
my_content <- httr::content(my_raw_results, as = "text")
my_content_from_json <- jsonlite::fromJSON(my_content)
my_content
my_content_from_json
my_content_from_json$lat
my_content_from_json
my_content_from_json$lat
my_location_string <- "thiscannotberight"
my_url <- paste0("https://nominatim.openstreetmap.org/search?q=", my_location_string,
"&format=json&limit=1")
# call the Url, retrieve the data and check if it was successful.
my_raw_results <- httr::GET(my_url)
# Transform the JSON data into useable format.
my_content <- httr::content(my_raw_results, as = "text")
my_content_from_json <- jsonlite::fromJSON(my_content)
status_code(my_raw_results)[[1]]
my_content_from_json
my_content_from_json
length(my_content_from_json)
length(my_content_from_json) == 0
runApp()
setwd("~/GitHub/weather_app")
devtools::document()
setwd("~/GitHub/weather_app/weatherApp")
devtools::document()
devtools::build()
devtools::install()
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp()
runApp()
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
my_url <- paste0("https://nominatim.openstreetmap.org/search?q=", "Amsterdam",
"&format=json&limit=1")
# call the Url, retrieve the data and check if it was successful.
my_raw_results <- httr::GET(my_url)
# Transform the JSON data into useable format.
my_content <- httr::content(my_raw_results, as = "text")
my_content_from_json <- jsonlite::fromJSON(my_content)
my_content_from_json
my_url
my_content_from_json$lat
my_content
my_raw_results
my_url <- paste0("https://nominatim.openstreetmap.org/search?q=", "New York",
"&format=json&limit=1")
# call the Url, retrieve the data and check if it was successful.
my_raw_results <- httr::GET(my_url)
my_raw_results
# Transform the JSON data into useable format.
my_content <- httr::content(my_raw_results, as = "text")
my_content
my_content_from_json <- jsonlite::fromJSON(my_content)
my_content_from_json
my_content_from_json$osm_id
my_content_from_json$display_name
devtools::document()
devtools::build(9)
devtools::build()
devtools::install()
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
### change something here
devtools::install_github(" Programming-The-Next-Step/weather_app")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
### change something here
devtools::install_github(" Programming-The-Next-Step/weather_app")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
### change something here
devtools::install_github(" Programming-The-Next-Step/weather_app/weatherApp")
runApp('~/GitHub/weather_app')
### weather_app in R Shiny ###
devtools::install_github("Bertlich/weatherApp")
### weather_app in R Shiny ###
devtools::install_github("Bertlich/weather_app")
### weather_app in R Shiny ###
devtools::install_github("bertlich/weather_app")
### weather_app in R Shiny ###
devtools::install_github(" Programming-The-Next-Step/weather_app")
### weather_app in R Shiny ###
devtools::install_github(" Programming-The-Next-Step/weather_app/weatherApp")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app//functions-for-RPackage/weatherApp")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app/functions-for-RPackage/weatherApp")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app#functions-for-RPackage/weatherApp")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp#functions-for-RPackage")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp#Functions-for-RPackage")
### weather_app in R Shiny ###
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp#Functions-for-RPackage")
devtools::install_github("Programming-The-Next-Step/weather_app#Functions-for-RPackage")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp#Functions-for-RPackage")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp")
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp", ref = "Functions-for-RPackage"" )
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
br(),
br(),
sidebarLayout(
sidebarPanel(
style = "background-color: EggWhite;",
# insert search field
fluidRow(column(width = 12,
align = "center",
textInput(inputId = "location", h3("Please enter a location"),
value = "Amsterdam"))
),
# insert select box
# this is not useful yet but I intend to use it later, if time allows.
fluidRow(column(width = 12,
align = "center",
selectInput("cur_hour_day", "Please indicate the type of forecast you are looking for",
c("current weather", "hourly forecast", "daily forecast")))
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(column(width = 12, actionButton(inputId = "search", "Search"),
align = "center")
),
br(),
br(),
# display weather GIF:
fluidRow(
column(width = 12,
align = "center",
HTML("<div style='height: 150px;'>"),
imageOutput("weather_gif"),
HTML("</div>"))
)
),
mainPanel(
# display chosen location and weather icon:
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("my_output_location"),
align = "center"),
column(width = 3,
align = "center",
HTML("<div style='height:40px;'>"),
imageOutput("weather_icon"),
HTML("</div>"))
),
br(),
# display weather image:
fluidRow(
column(width = 12,
align = "center",
HTML("<div style='height: 100px;'>"),
withSpinner(imageOutput("weather_image"), type = 1),
HTML("</div>"))
),
br(),
br(),
# display current general weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_weather"),
align = "center")
),
# display current temperature weather forecast
fluidRow(
column(width = 6,
offset = 3,
verbatimTextOutput("current_temp"),
align = "center")
),
# display sunrise and sunset
fluidRow(
column(width = 6,
verbatimTextOutput("sunrise"),
align = "center"),
column(width = 6,
verbatimTextOutput("sunset"),
align = "center")
),
# display feels like and wind
fluidRow(
column(width = 6,
verbatimTextOutput("feels_like"),
align = "center"),
column(width = 6,
verbatimTextOutput("wind_speed"),
align = "center")
)
)
)
)
# This creates what the server is running
server <- function(input, output, session) {
#my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
location_string <- weatherApp::geocode(my_location())$location
if(location_string > 25) {
location_string <- substr(location_string, 1, 25)
}
location_string
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$description
})
output$current_temp <- renderText({
temperature <- round(weatherApp::get_weather(my_location(), my_api_key)$current$temp - 273.15, 2)
paste(temperature, "degrees Celsius")
})
output$sunrise <- renderText({
sunrise <- weatherApp::get_weather(my_location(), my_api_key)$current$sunrise
paste("Sunrise:", as.POSIXct(sunrise, origin="1970-01-01", TZ= "Europe/Berlin"))
})
output$sunset <- renderText({
sunset <- weatherApp::get_weather(my_location(), my_api_key)$current$sunset
paste("Sunset:", as.POSIXct(sunset, origin="1970-01-01", TZ= "Europe/Berlin"))
})
output$feels_like <- renderText({
paste("Feels like:", round((weatherApp::get_weather(my_location(), my_api_key)$current$feels_like - 273.15), 2) , "degrees Celsius")
})
output$wind_speed <- renderText({
paste("Wind speed:", weatherApp::get_weather(my_location(), my_api_key)$current$wind_speed, "[m/s]")
})
output$weather_image <- renderImage({
weatherApp::get_weather_image(my_location(), my_api_key)
list( src = "www/weather_image.png",
alt = paste("weather_image"),
width = 500,
height = 100)
})
output$weather_icon <- renderImage({
weatherApp::get_icon(my_location(), my_api_key)
list( src = "www/weather_icon.png",
alt = paste("weather_icon"),
width = 50,
height = 40)
})
output$weather_gif <- renderImage({
weatherApp::get_weather_gif(my_location(), my_api_key)
list( src = "www/my_weather.gif",
alt = paste("weather_gif"),
width = 220,
height = 150)
})
}
# Run the application
shinyApp(ui = ui, server = server)
devtools::install_github("Programming-The-Next-Step/weather_app/weatherApp", ref = "Functions-for-RPackage")
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
