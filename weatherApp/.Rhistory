titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
img(src = "rain.png", height = 70, width = 70))
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_location <- eventReactive(input$search, {
input$location
})
my_api_key <- Sys.getenv("MY_API")
output$my_output_location <- renderText({
my_location
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
img(src = "rain.png", height = 70, width = 70))
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_location <- eventReactive(input$search, {
input$location
})
my_api_key <- Sys.getenv("MY_API")
output$my_output_location <- renderText({
my_location()
})
}
# Run the application
shinyApp(ui = ui, server = server)
getwd()
devtools::document()
devtools::document()
setwd("~/GitHub/weather_app/weatherApp")
setwd("~/GitHub/weather_app/weatherApp")
devtools::document()
devtools::build()
devtools::install()
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
img(src = "rain.png", height = 70, width = 70))
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
}
# Run the application
shinyApp(ui = ui, server = server)
myobject <- get_weather("Amsterdam, Niederlande", my_api_key)
myobject <- get_weather("Amsterdam, Niederlande", Sys.getenv("MY_API"))
geocode("Amsterdam, Netherlands")
geocode <- function(location){
# split the location string, that the function got as input, into the different words.
my_location <- stringr::str_split(location, boundary("word"))
my_location_string <- my_location[[1]][1]
for(i in 2:length(my_location[[1]])){
my_location_string <- paste0(my_location_string, "+", my_location[[1]][i])
}
# Write down the url that retrieves the long/lat information from openstreetmap.org
my_url <- paste0("https://nominatim.openstreetmap.org/search?q=", my_location_string,
"&format=json&limit=1")
# call the Url, retrieve the data and check if it was successful.
my_raw_results <- httr::GET(my_url)
if (status_code(my_raw_results)[[1]] != 200) {
stop("Please enter a valid location!")
}
# Transform the JSON data into useable format.
my_content <- httr::content(my_raw_results, as = "text")
my_content_from_json <- jsonlite::fromJSON(my_content)
# Save the longitude latitude data in an object and return it.
geocode_data <- data.frame(3)
geocode_data$location <- location
geocode_data$latitude <- my_content_from_json$lat
geocode_data$longitude <- my_content_from_json$lon
return(geocode_data)
}
geocode("Amsterdam, Niederlande", Sys.getenv("MY_API"))
geocode("Amsterdam, Niederlande")
devtools::document()
devtools::build()
devtools::install()
testobject  <- weatherApp::get_weather("Amsterdam, Niederlande", Sys.getenv("MY_API"))
geocode("Amstedam, Niederlande")
geocode("Amsterdam, Niederlande")
geocode("Marl, Deutschland")
get_weather("Amsterdam, Niederlande", Sys.getenv("MY_API"))
get_weather <- function(location, api_key) {
# first, we need to use the function geocode(location) to get the longitude and the latitude of the desired location.
latitude <- geocode(location)$latitude
longitude <- geocode(location)$longitude
# latitude <- tidygeocoder::geo_osm(location)$lat[1] # old version
# longitude <- tidygeocoder::geo_osm(location)$long[1] # old version
if (is.na(latitude) | is.na(longitude)) {
stop("Please type in a valid location")
}
# now, we access www.openweatherapp.org and retrieve the weather data.
my_url <- paste("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", api_key, sep ="")
# We retrieve the data using the url
my_raw_results <- httr::GET(my_url)
# We check whether we successfully retrieved data from the API.
if (status_code(my_raw_results)[[1]] != 200) {
stop("Something went wrong. You might have put in a wrong location or api_key. Please check for spelling mistakes and try again.")
}
# And we transform the infromation we retrieved from JSON format into a usable format in R .
my_content <- httr::content(my_raw_results, as = "text")
my_content_from_json <- jsonlite::fromJSON(my_content)
return(my_content_from_json)
}
get_weather("Amsterdam, Niederlande", Sys.getenv("MY_API"))
geocode("Amsterdam, Niederlande")$latitude
latitude <- geocode("Amsterdam, Niederlande")$latitude
longitude <- geocode("Amsterdam, Niederlande")$longitude
api_key <- Sys.getenv("MY_API")
my_url <- paste("https://api.openweathermap.org/data/2.5/onecall?lat=", latitude, "&lon=", longitude,
"&exclude=FALSE&appid=", api_key, sep ="")
my_url
api_key <- Sys.getenv("MY_API")
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
Sys.setenv( MY_API='4442c8a4077bb52da19a77c4fa41f5f5')
get_weather("Amsterdam, Niederlande", Sys.getenv("MY_API"))
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
img(src = "rain.png", height = 70, width = 70))
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
img(src = "rain.png", height = 70, width = 70))
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/GitHub/weather_app')
runApp('~/GitHub/weather_app')
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center",
style = "background-color:LightSkyBlue"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center",
style = "background-color:LightSkyBlue"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
style = "background-color:LightSkyBlue")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
# This creates the user interface
ui <- fluidPage(
# set background color to light sky blue.
setBackgroundColor("LightSkyBlue"),
# create Heading
titlePanel(h1("Get your personal weather forecast", align = "center")),
# insert search field
fluidRow(
column(width = 12,
textInput(inputId = "location", h3("Search for a location"),
value = "Enter a location..."),
align = "center")
),
# insert search button
# has to be used with "eventReactive()"
fluidRow(
column(width = 12,
actionButton(inputId = "search", "Search"),
align = "center",
style = "background-color:#4d3a7d;"),
br(),
br()
),
# test reactivity
fluidRow(
column(width = 12,
verbatimTextOutput("my_output_location"),
align = "center",
style = "background-color:#4d3a7d;")
),
fluidRow(
column(width = 12,
verbatimTextOutput("current_weather"),
align = "center")
)
)
# This creates what the server is running
server <- function(input, output, session) {
my_api_key <- Sys.getenv("MY_API")
# Only update the input for location if button is pressed.
my_location <- eventReactive(input$search, {
input$location
})
output$my_output_location <- renderText({
my_location()
})
output$current_weather <- renderText({
weatherApp::get_weather(my_location(), my_api_key)$current$weather$main
})
}
# Run the application
shinyApp(ui = ui, server = server)
